TRAVERSABLE -

  class (Functor t, Foldable t) => Traversable t where
    traverse
      :: Applicative f
      => (a -> f b)
      -> t a
      -> f (t b)
    traverse f = sequenceA . fmap f

  sequenceA :: Applicative f => t (f a) -> f (t a)
  sequenceA = traverse id

  To implement Traversable, either `traverse` or `sequenceA` needs to be
  implemented. Otherwise, these default implementations will just run in a loop
 
sequenceA -
  a function that flips the ordering of structure (check the signature above)

  Using `fmap` it is easy to get result like `f (t a)` eg `[IO String]` when you
  really want `IO [String]` which is more easily acheivable with `traverse`


traverse -
  similiar to sequenceA except a function can also be applied to the values within
  the structure passed in. However, it is important to note that unlike `=<<` the
  strucutre produced by the function is not necessarily the same as the structure
  that was passed in.

  fmap     ::                  (a -> b)   -> f a -> f b
  (=<<)    :: Monad m       => (a -> m b) -> m a -> m b
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)


IMPLEMENTING FMAP USING TRAVERSE

  fmap :: Functor f => (a -> b) -> f a -> f b
  Identity :: a -> Identity a
  runIdentity :: Identity a -> a
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)

  fmap' :: Traversable f => (a -> b) -> f a -> f b
  fmap' f = runIdentity . (traverse (Identity . f))

  -- assuming f is passed in
  (Identity . f)                          :: a -> Identity b
  traverse (Identity . f)                 :: t a -> Identity (t b)
  runIdentity . (traverse (Identity . f)) :: t a -> t b


IMPLEMENTING FOLDMAP USING TRAVERSE

  foldMap :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
  Constant :: a -> Constant a b
  getConstant :: Constant a b -> a
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)

  foldMap' :: (Traversable f, Monoid m) => (a -> m) -> f a -> m
  foldMap' f = getConstant . (traverse (Constant . f))

  -- assuming f is passed in
  (Constant . f)                          :: Monoid m => a -> Constant m b
  traverse (Constant . f)                 :: Monoid m => t a -> Constant m (t b)
  getConstant . (traverse (Constant . f)) :: Monoid m => t a -> m
  
  The fmap example is pretty straight-forward. This one is not.

  The reason foldMap can be defined this way (looking at you, baffling Constant) is
  because the `f` in traverse is an `Applicative`
    traverse :: Applicative f => (a -> f b) -> t a -> f (t b)

  And as we learned, with Applicative, the structure of them is combined Monoidally
  This means that `Constant m` is an Applicative.
    instance Monoid m => Applicative (Constant m)
  Note that `Constant` is only defined as an Applicative when `m` is already a 
  Monoid.

  So if we look at `sequenceA` (Which is used by traverse) we can see why it
  is important that `Constant m` is an Applicative when `m` is a Monoid.

    xs = [Constant (Sum 1), Constant (Sum 2)] :: [Constant (Sum Integer) b]
    sequenceA xs == Constant (Sum {getSum = 3})

  and breaking down the types
    sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)
    t = [Constant (Sum Integer) b]
    f = Constant (Sum Integer)
    a = b
    sequenceA :: [Constant (Sum Integer) b] -> Constant (Sum Integer) [b]

  since `f` is the partially applied type `Constant (Sum Integer)`
  when we go from `t (f a)` to `f (t a)` the `f`s have be combined Monoidally
  and since `instance Monoid m => Applicative (Constant m)` this occurs by
  summing the Sum types, resulting in
    Constant (Sum {getSum = 3})
  
  but what happens to the `t a`??? why did we just return the `f`??? Well, since the
  Constant type throws away it's second type argument, the `t a` from the 
  function signature gets discarded during evaluation.
    
  but how does `sequenceA` actually work??? There should be some implementation
  examples later. (look at the exerices section to see implementations of 
  Traversable for Constant and List)



EITHER INSTANCE OF TRAVERSABLE

  instance Traversable (Either a) where
    traverse _ (Left x)  = pure (Left x)
    traverse f (Right y) = Right <$> f y

notice how it differs from the Functor Instance

  instance Functor (Either a) where
    fmap _ (Left x) = Left x
    fmap f (Right y) = Right (f y)

traverse fmaps the Either structure over the result of `f y`

Since the function passed to traverse adds addition structure `f`
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)
and we want that additional structure on the outside of the result, we use fmap
to transform the value inside the structure `f`. This allows us to swap the two
structures, resulting in `f (t b)` as opposed to the `t (f b)` that would result
otherwise.


TUPLE INSTANCE OF TRAVERSABLE

  instance Traversable ((,) a) where
    traverse f (x, y) = (,) x <$> f y

  instance Functor ((,) a) where
    fmap f (x, y) = (x, f y)

notice the difference between traverse and fmap, notice how these instances
very similar to Either



TRAVERSABLE LAWS - NATURALITY

h . traverse g = traverse (h . g)

digging into an example, let's say

  g :: a -> Maybe a
  g = Just

  h :: Maybe [Char] -> Maybe [Char]
  h = (<*>) (Just ((<>) "foo-"))

  (h . g) :: [Char] -> Maybe [Char]

The book states this law as "behaving unsurprisingly", but I do think it is
surprising. Given that the signatures of these functions are different
    traverse (h . g) :: (Traversable t)     => t [Char] -> Maybe (t [Char])
    h . traverse g   ::                          [Char] -> Maybe [Char]

it makes sense that the type signatures are different, given the value being passed
to `h` is different in each case
  for 
    traverse (h . g)
  the output of `g` is the input to `h`. Which is pretty straight-forward given
  than `g` produces a `Maybe a` , and `h` expects a `Maybe [Char]`

  but for
    h . traverse g
  the output of `traverse g` is `Maybe (t b)`  which means that the value being
  passed to `h` is now a `Maybe ( t [Char])` where as before it was just
  `Maybe [Char]

What makes this confusing is that while all values that can be passed to both
versions of this function produce the same results. The values that can be accepted
by both is a subset of the values that can be accepted by either one individually.

  traverse (h . g) ["a", "b"] == Just ["foo-a", "foo-b"]
  (h . traverse g) ["a", "b"] == Type Error

  traverse (h . g) ["ab"] == Just ["foo-ab"]
  (h . traverse g) "ab" == Just "-fooab"

  traverse (h . g) "ab" == TypeError
  (h . traverse g) ["ab"] == TypeError

So this law is not universal and does not work for all functions. It works if the
functions are general enough to be composed.
For example: 
  g :: a -> Maybe a
  g = Just

  h :: Num a => Maybe a -> Maybe a
  h = (<*>) (Just (+1))

  (h . g) :: Num b => b -> Maybe b

  traverse (h . g) :: (Traversable t, Num b)     => t b -> Maybe (t b)
  h . traverse g   :: (Num (t b), Traversable t) => t b -> Maybe (t b)

  traverse (h . g) (Sum 1) == Just (Sum {getSum = 2})
  (h . traverse g) (Sum 1) == Just (Sum {getSum = 2})

  although there are still problems here
  traverse (h . g) [1, 2]  == Just [2,3]
  (h . traverse g) [1, 2]  == (returns a type `(Num b, Num [b]) => Maybe [b]` ??)

Maybe there are examples that work completely? I don't know.



TRAVERSABLE LAWS - IDENTITY

traverse Identity = Identity

this one is more straight-forward
  traverse :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
  Identity :: a -> Identity a

  traverse Identity :: (Traversable t) => t a -> Identity (t a)

  traverse Identity [1] == Identity [1]



TRAVERSABLE LAWS - COMPOSITION

traverse (Compose . fmap g . f) =
  Compose . fmap (traverse g) . traverse f

  traverse :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
  Compose :: f (g a) -> Compose f g a
  fmap :: Functor f => (a -> b) -> f a -> f b
  (.) :: (b -> c) -> (a -> b) -> (a -> c)

for these examples
  f :: a -> Identity a
  g :: a -> [a]
  g a = [a]

breaking down `traverse (Compose . fmap g . f)`

  Compose . fmap g . f :: a -> Compose Identity [] a
    which is the same as
      Compose . (fmap g) . f
    and
      Compose . ((fmap g) . f)
    just to be clear

  traverse (Compose . fmap g . f)
    :: Traversable t => t b -> Compose Identity [] (t b) 

breaking down `Compose . fmap (traverse g) . traverse f`
  
  traverse g :: Traversable t => t a -> [t a]

  fmap (traverse g)
    :: (Traversable t, Functor f) => f (t a) -> f [t a]

  traverse f :: Traversable t => t a -> Identity (t a)

  fmap (travserse g) . traverse f :: t a -> Identity [t a]

  Compose . fmap (traverse g) . traverse f
    :: Traversable t => Compose Identity [] (t a)

so
  
  traverse (Compose . fmap g . f)
    :: Traversable t => t a -> Compose Identity [] (t a) 

  ==

  Compose . fmap (traverse g) . traverse f
    :: Traversable t => t a -> Compose Identity [] (t a)


These same laws also apply to `sequenceA`

  sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)

  Naturality
    t . sequenceA = sequenceA . fmap t

  Identity
    sequenceA . fmap Identity = Identity

  Composition
    sequence . fmap Compose = Compose . fmap sequenceA . sequenceA



EXERCISES - Write a Traversable instance for the datatype

1.
newtype Identity a = Identity a
  deriving (Eq, Ord, Show)

instance Traversable Identity where
  traverse fn (Identity a) = Identity <$> fn a

since fn is of type `a -> f b`
and our `t` is Identity
and we want our result to be `f (Identity b)`
we use `fmap` to lift the Identity constructor into the `f b` produced by `fn`


2.
newType Constant a b = Constant { getConstant :: a }

instance Traversable (Constant a) where
  traverse _ (Constant a) = pure $ Constant a

The first argument to traverse is a function, but that function only applies to
the `b` of type `Constant a b` and since Constant only ever returns the `a`, we
have no use for the function. However, we do still need to wrap our return value
in an Applicative. Using `pure` we can say "wrap this `Constant a` in whatever 
Applicative is required by whoever is calling this function", without actually
having to know which Applicative instance will be used.

3.
data Optional a
  = Nada
  | Yep a
  deriving (Show, Eq)

instance Functor Optional where
  fmap _ Nada    = Nada
  fmap f (Yep a) = Yep $ f a

instance Foldable Optional where
  foldMap _ Nada = mempty
  foldMap f (Yep a) = f a

instance Traversable Optional where
  traverse _ Nada    = pure Nada
  traverse f (Yep a) = Yep <$> f a

Similar to Constant, in that some cases we do not use the function passed in. So we
use `pure` to infer what the Applicative type is that should be returned.

4.
data List a
  = Nil
  | Cons a (List a)
  deriving (Eq, Show)

instance Semigroup (List a) where
  (<>) Nil Nil = Nil
  (<>) list Nil = list
  (<>) Nil list = list
  (<>) (Cons a list) list' = Cons a (list <> list')

instance Monoid (List a) where
  mempty = Nil
  mappend = (<>)

instance Functor List where
  fmap _ Nil = Nil
  fmap fn (Cons a (rest)) = Cons (fn a) (fmap fn rest)

instance Applicative List where
  pure a = Cons a Nil
  (<*>) Nil _ = Nil
  (<*>) _ Nil = Nil
  (<*>) (Cons fn fnList) list = fmap fn list <> (fnList <*> list)

instance Foldable List where
  foldMap _ Nil           = mempty
  foldMap f (Cons a list) = f a <> foldMap f list

instance Traversable List where
  traverse _ Nil           = pure Nil
  traverse f (Cons a list) = Cons <$> f a <*> traverse f list

This one is interesting for it's use of `<*>` Since the Cons data constructor
has two arguments, both of which need to be transformed, we use Applicative
to apply the first argument
  Cons <$> f a
which produces
  Maybe (List String -> List String)
and then we use apply `<*>` to lift that function over a recursive call to
traverse (which will eventually return `Just Nil` once it hits the end of the list
Remeber that the type of apply `<*>` is
  (<*>) :: f (a -> b) -> f a -> f b
so 
  Cons <$> f a
produces 
  Maybe (List String -> List String)
which is our 
  f (a -> b)
and 
  traverse f list
produces
  Maybe (List a)
which is used as our `f a` so then we get an `f b` as a result

5.
data Three a b c = Three a b c deriving (Eq, Show)

instance Functor (Three a b) where
  fmap f (Three a b c) = Three a b (f c)

instance Traversable (Three a b) where
  traverse f (Three a b c) = Three a b <$> f c

in contrast to `List` this implementation of `traverse` does not require an `apply`
since only one of the arguments to the `Three` data constructor needs to be
transformed. So we can simply `fmap` the partially applied constructor over the 
the return of `f c` producing an `f (Three a b d)` where `d` is the value returned
inside the structure produced by `f` since `f :: (c -> f' b)`

6.
Data Pair a b = Pair a b

instance Traversable (Pair a) where
  traverse f (Pair a b) = Pair a <$> f b

this is very similar to the implementation for `Three`

7.
data Big a b = Big a b b deriving (Eq, Show)

instance Traversable (Big a) where
  traverse f (Big a b b') = Big a <$> f b <*> f b'

this is similar to the implementation for List, but a little simpler

8.
data Bigger a b = Bigger a b b b deriving (Eq, Show)

instance Traversable (Bigger a) where
  traverse f (Bigger a b b' b'') = Bigger a <$> f b <*> f b' <*> f b''

this is very similar to the implementation of Big, just Bigger

9.
data S n a = S (n a) a deriving (Eq, Show)

instance Functor n => Functor (S n) where
  fmap f (S na a) = S (fmap f na) (f a)

instance Foldable n => Foldable (S n) where
  foldMap f (S na a) = foldMap f na <> f a

instance Traversable n => Traversable (S n) where
  traverse f (S na a) = S <$> (traverse f na) <*> f a

since `n` also implements Traversable, this one was actually pretty straight
forward. Just call the instance of traverse that is implemented for `n`

10.
data Tree a
  = Empty
  | Leaf a
  | Node (Tree a) a (Tree a)
  deriving (Eq, Show)

instance Functor Tree where
  fmap _ Empty = Empty
  fmap f (Leaf a) = Leaf $ f a
  fmap f (Node leftTree a rightTree) =
    Node (fmap f leftTree) (f a) (fmap f rightTree)

instance Foldable Tree where
  foldMap _ Empty = mempty
  foldMap f (Leaf a) = f a
  foldMap f (Node leftTree a rightTree) =
    (foldMap f leftTree) <> f a <> (foldMap f rightTree)

  foldr _ acc Empty = acc
  foldr f acc (Leaf a) = f a acc
  foldr f acc (Node lt a rt) = foldr f (f a (foldr f acc rt) ) lt

instance Traversable Tree where
  traverse _ Empty = pure Empty
  traverse f (Leaf a) = Leaf <$> f a
  traverse f (Node lt a rt) = Node <$> traverse f lt <*> f a <*> traverse f rt

