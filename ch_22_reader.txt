Reader - 
  Reader is a pattern that passes a single argument to multiple functions. This
  is used by many applications to make environment variables accessible to many
  functions without having to explicity pass them as arguments.

  Reader utilizes the Functor, Applicative, and Monad instances defined for the
  function operator `->`

  newtype Reader r a = 
    Reader { runReader :: r -> a }

Fmapping functions over functions with <$>

  we've seen function composition
    f :: Int -> Int
    g :: Int -> Int
    f . g :: Int -> Int

  but you can also use fmap to compose functions
    f <$> g :: Int -> Int
  This can happen because the function operator `->` is a valid functor when applied
  to one argument. We saw this in chapter 19.
  so breaking down the types we get

    (<$>) :: (a -> b) -> f a -> f b
    f <$> g

    a :: Int
    b :: Int
    f :: ((->) Int)

  since `g` is of type `Int -> Int` that makes the `f` in `f a` `((->) Int)` and the
  `a` in `f a` Int

  so what this means is that `fmap` takes a function `(a -> b)` and an `f a` where
  `f` is a partially applied function, and returns a function that is the
  composition of the two functions passed in.

  looking at the types of `fmap` and `.` we see they are essentially the same

    (.)   :: (b -> c) -> (a -> b) -> (a -> c)
    (<$>) :: (b -> c) -> f b      -> f c

  if you replace `a ->` with `f`, then the definitions are exactly the same.

Applying functions over functions with <*>

  similar to how we can use fmap to compose functions, we can also use apply `<*>`

  `->` is not only a Functor, but also an Applicative

    (+) :: Int -> Int -> Int
    f :: Int -> Int
    g :: Int -> Int
    (<$>) :: (a -> b) -> f a -> f b
    (<*>) :: f (a -> b) -> f a -> f b

    (+) <$> f <*> g

  breaking down the types

    (<$>) :: ( a  -> (     b   )) ->     f       a    ->      f           b

             Int -> (Int -> Int)  -> (((->) Int) Int) -> (((->) Int) (Int -> Int))
    (<$>)    [        (+)      ]      [    f   ]   
  
  and now that we have something of the form `f (a -> b)` we can use `<*>` to lift
  it over other values.

    (+) <$> f <*> g :: Int -> Int

    (<*>) ::        f    (  a ->  b ) ->      f       a   ->     f       b
             (((->) Int) (Int -> Int) -> (((->) Int) Int) -> ((->) Int) Int

  which is equivalent to

    (\x -> (+) (f x) (g x))

  The arguemnt `x` is passed to both `f` and `g`. This occurs because of how
  partially applied functions are combined monoidally as part of their
  implementation of the Applicative instance. But how does that work??

  consider this
    f <> g
  what does it mean? Well, its the same as combining any other structure.
  In this case, by combining these functions we take two functions that take one
  argument each and combine them to create one function that takes one argument.
  After being supplied that argument it applies that argument to each function
  and then monoidally combines the result.
  Something like this:

    instance Semigroup b => ((->) a b) where
      f <> f' = (\x -> f x <> f x')

  then, looking at the Functor and Applicative instances for ((->) a) we can see
  how a single argument `x` is passed to all functions being combined via fmap
  and apply. 

    instance Functor ((->) a) where
      fmap f f' = (\x -> f (f' x))

    instance Applicative ((->) a) where
      pure x = const x
      f <*> f' = (\x -> f x (f' x))

  Which explains how passing a single argument to the function
    (+) <$> (+10) <*> (*2)
  is equivalent to 
    (\x -> (x+10) + (x*2))



Composing Functions with Monads

  consider the following functions
   
    f :: Integer -> Integer
    f = (+10)

    g :: Integer -> Integer
    g = (*2)

    fg :: Integer -> Integer
    fg = do
      a <- f
      b <- g
      return (a + b)

  but how are `a` and `b` be set equal to paritally applied functions??
  remember that `<-` is just syntactic sugar for bind `>>=` so
  the above function is equivalent to
    
    fg' :: Integer -> Integer
    fg' =
      (\x ->
        f x >>= (\a -> 
          g x >>= (\b -> 
            return (a + b)
          )
        )
      )

The Monad instance for functions

  in addition to using Monad to compose functions, it can also be used to create
  function chains that pass along the result of the previous function in the chain.

  for example if we want to do
    h :: Int -> Int
    h x = (x + 10) + x

  you could do 
    h' = (+) <$> (+10) <*> id

  or you could use Monad to do this

    h'' = (+10) >>= (+)

  and with Monad you can keep chaining functions, so if you wanted something like

    n :: Int -> Int
    n x = ((x + 10) + x) * x

  you could write that easily using Monad

    n' = (+10) >>= (+) >>= (*)

Defining Monad in terms of Applicative

  In the general case, Monad can not be defined in terms of Applicative because
  we have no knowledge of what structure we are lifting over.
  For the specific case of functions, we have more leeway

  take the definitions of `<*>` and `>>=`

    (<*>) :: f (a -> b) -> f a -> f b
    (>>=) :: m a -> (a -> m b) -> m b

  since we know that `f` and `m` are of the type `((->) c)` we can write them as

    (<*>) :: (c -> a -> b) -> (c -> a) -> (c -> b)
    (>>=) :: (c -> a) -> (a -> c -> b) -> (c -> b)

  and if look at the reverse bind `=<<` the type signature become more similar

    (<*>) :: (c -> a -> b) -> (c -> a) -> (c -> b)
    (=<<) :: (a -> c -> b) -> (c -> a) -> (c -> b)

  under normal circumstances turning a type of
    f (a -> b)
  into
    (a -> f b)
  would be difficult, but since this is the function instance and these types
  are really
    (c -> a -> b)
  and
    (a -> c -> b)

  we can write a function that makes them equal
    flip :: (x -> y -> z) -> (y -> x -> z)
    flip z = (\y x -> z x y)

  so now
    (<*>)             :: (c -> a -> b) -> (c -> a) -> (c -> b)

    (>>=)             :: (c -> a) -> (a -> c -> b) -> (c -> b)
    (fa >>= aFb)       = flip aFb <*> fa

    (flip aFb <*> fa) :: (c -> a -> b) -> (c -> a) -> (c -> b)
  
  By showing this, we can see that the Applicative instance for functions is 
  equivalent to the Monad instance. Which makes the Monad instance no more
  powerful than the Applicative instance. This is not the case for most types
  but since the order of arguments in functions are easily swapped, it is possible
  to define Monad in terms of Applicative.

Reader 

  Reader is a newtype wrapper for the function type

    newtype Reader r a = 
      Reader { runReader :: r -> a }

  This is done to make it explicit when this pattern is being used.

  The Functor instance for Reader is the same as it is for the function type `->`
  except with the return wrapped back in a Reader type

    instance Function (Reader r) where
      fmap :: (a -> b) -> Reader r a -> Reader r b
      fmap f (Reader ra) = Reader $ \r -> f (ra r)

  or you could also make it

      fmap f (Reader ra) = Reader $ f . ra

  since `fmap` is equivalent to composition (`.`) for functions


Exercise: Ask

  ask :: Reader a a
  ask =  Reader id

  if the two type arguments to Reader `r` and `a` and we want `Reader a a` we need
  a function that takes one argument, and always returns a value of the same type.
  Since there are no constraints on the types that can be passed into Reader. The
  function must be `id` since we have no other information about the types.

Exercise: Reading comprehension

  Write liftA2

    myLiftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
    myLiftA2 fn fa fb = fn <$> fa <*> fb

  write the following function

    asks :: (r -> a) -> Reader r a
    asks f = Reader f

  implement the Applicative for Reader

    instance Applicative (Reader r) where
      pure :: a -> Reader r a
      pure a = Reader $ const a

      (<*>) :: Reader r (a -> b)
            -> Reader r a
            -> Reader r b
      (Reader rab) <*> (Reader ra) =
        Reader $ \r -> rab r (ra r)


Exercise: Reader Monad

1. Implement the Reader Monad

  instance Monad (Reader r) where
    return :: a -> Reader r a
    return = pure

    (>>=) :: Reader r a
          -> (a -> Reader r b)
          -> Reader r b
    Reader ra >>= aRb = Reader $ \r -> (runReader (aRb (ra r))) r

  There are a couple of weird things going on here
  First, the function returns a `Reader r b`, but in order to get the `r` we need
  to create an anonymous function, so the following does not work

    Reader ra >>= aRb = \r -> aRb (ra r)

  because the return value of the is `(r -> Reader r b)`
  which also means that this will not work
  
    Reader ra >>= aRb = Reader $ \r -> aRb (ra r)

  because that returns a type of `Reader r (r -> Reader r b)`
  So how do we prevent the nesting of the `Reader` type? We need to get that
  `b` out of that inner `Reader`. Looking at the type for `Reader`

    newtype Reader r a = 
      Reader { runReader :: r -> a }

  RunReader is an accessor function that returns the function `r -> a`
  we need to use that to extract the function from the inner `Reader` produced
  by the Monadic function.
  So now we try

    Reader ra >>= aRb = Reader $ \r -> runReader (aRb (ra r))

  but that's not quite right either. The return of this function is of type

  `Reader r (r -> b)` 

  since now the anonymous function returns a function that is of the type
  
  `(r -> r -> b)`

  so we need to get rid of one of those `r`s. To do that we need to pass an
  `r` to the function extracted from the inner `Reader`

    Reader ra >>= aRb = Reader $ \r -> (runReader (aRb (ra r))) r

  now this looks right, and returns the correct type.

  The most important take-away here is how to extract the inner Reader using
  `runReader` This is the part that stumped me the most. So remember to look at the
  type definition of the type you are writing a Monad instance for to see how
  you can manipulate the type to get what you need.

2. Rewrite the monadic getDogRm to use your Reader datatype

  newtype HumanName
    = HumanName String
    deriving (Eq, Show)

  newtype DogName
    = DogName String
    deriving (Eq, Show)

  newtype Address
    = Address String
    deriving (Eq, Show)

  data Person = Person
    { humanName :: HumanName
    , dogName :: DogName
    , address :: Address
    } deriving (Eq, Show)

  data Dog = Dog
    { dogsName :: DogName
    , dogsAddress :: Address
    } deriving (Eq, Show)
 
  -- original    
  getDogRM :: Person -> Dog
  getDogRM = do
    name <- dogName
    addy <- address
    return $ Dog name addy

  -- new one
  getDogRM' :: Reader Person Dog
  getDogRM' = Reader $ Dog <$> dogName <*> address

  So what's happening here?

  `Dog` is a constructor that takes a `DogName` and an `Address` 
  we compose these functions and the result is another function
    Dog <$> dogName <*> address
  returns a function of type (Person -> Dog)

  we pass that function to the `Reader` constructor. `Reader` takes one argument,
  a function (r -> a), the type of the first argument to the function passed to
  Reader, and the type returned after the first argument is passed becomes the
  type arguments to the Reader type. soooo a function of type
    (Person -> Dog)
  when passed to Reader, creates the type
    Reader Person Dog

  really, all Reader is is a way to wrap function composition into a type


Chapter Exercises -- there's a lot of preamble here, so I'll leave comments
where the exercises are

  module Readers.ReaderPractice where

  import Data.Maybe

  x :: [Integer]
  x = [1, 2, 3]

  y :: [Integer]
  y = [4, 5, 6]

  z :: [Integer]
  z = [7, 8, 9]

  -- implement 
  -- zip x and y and use 3 as lookup
  xs :: Maybe Integer
  xs = lookup 3 $ zip x y

  -- implement 
  -- zip y and z and use 6 as lookup
  ys :: Maybe Integer
  ys = lookup 6 $ zip y z

  -- implement 
  -- zip x and y and use 4 as lookup
  zs :: Maybe Integer
  zs = lookup 4 $ zip x y

  -- implement 
  -- zip x and z and take variable as lookup
  z' :: Integer -> Maybe Integer
  z' n = lookup n $ zip x z

  -- implement 
  -- make a tuple of xs and ys
  x1 :: Maybe (Integer, Integer)
  x1 = (,) <$> xs <*> ys

  -- implement 
  -- make a tuple of ys and zs
  x2 :: Maybe (Integer, Integer) 
  x2 = (,) <$> ys <*> zs

  -- implement
  -- take an argument and make a tuple of two application of z`
  x3 :: Integer -> (Maybe Integer, Maybe Integer)
  x3 x' = (z' x', z' x')

  -- implement
  -- take a tuple and add the values
  summed :: Num c => (c, c) -> c
  summed = uncurry (+) 

  -- implement
  -- lift Boolean conjunction (&&) over two partially applied functions 
  -- (>3) and (<8)
  bolt :: Integer -> Bool
  bolt = (&&) <$> (>3) <*> (<8)

  sequA :: Integral a => a -> [Bool]
  sequA m = sequenceA [(>3), (<8), even] m

  s' :: Maybe Integer
  s' = summed <$> ((,) <$> xs <*> ys)


  main :: IO ()
  main = do
    print $
      sequenceA [Just (3 :: Integer), Just 2, Just 1]

    print $ sequenceA [x, y]
    print $ sequenceA [xs, ys]
    print $ summed <$> ((,) <$> xs <*> ys)
    print $ fmap summed ((,) <$> xs <*> zs)
    print $ bolt 7
    print $ fmap bolt z

    print $ sequA (7 :: Integer)

    -- 1. fold boolean conjunction operator over the list of results of 
    --    sequA (applied to some value)
    print $ foldr (&&) True (sequA (4 :: Int))

    -- 2. apply sequA to s'
    print . sequA $ fromMaybe 0 s'

    -- 3. Apply bolt to ys
    print . bolt $ fromMaybe 0 ys


Rewriting Shawty - Use ReaderT to avoid implicity passing the database connection
                   to App

original
  main :: IO ()
  main = do
    rConn <- R.connect R.defaultConnectInfo
    scotty 3000 (app rConn)

fixed

  runApp :: ReaderT R.Connection IO ()
  runApp = ReaderT (\r -> scotty 3000 (app r))

  main :: IO ()
  main = do
    rConn <- R.connect R.defaultConnectInfo
    runReaderT runApp rConn 

This one seemed kind of arbitrary to me. Since we are still explicitly passing
the database connection to the `app` function.
I would have expected the signature of `app` to change so that the connection
wasn't explicity passed in, but whatever.
I had to look up this answer. I see where it's coming from in using ReaderT to
do something, but I don't think the description of the problem is accurate.

I think the description should be either

write a function `runApp` with signature 
  runApp :: ReaderT R.Connection IO ()
and use that in main

or

given this function
  RunReaderT runApp Conn
write runApp and use it in main
