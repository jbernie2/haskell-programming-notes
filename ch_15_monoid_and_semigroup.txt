Monoid
  - a binary associative operation with an identity
  - it is a generic append operations that works with many types

Semigroup
  - a binary associative operation


M O N O I D S 
  type class

  class Semigroup a => Monoid a where
    mempty :: a
    mconcat :: a -> a -> a
    mappend :: [a] -> a

  NOTE: mconcat is implemented as <> which actually is part of
        the Semigroup class

binary operation: a function that takes two arguments
associative : the grouping of the arguments does not matter. The ordering of the arguments does. (as seen in the first example)
  1. [a,b] <> [c] == [a] <> [b,c] /= [b,c] <> [a]
  2. ((Sum 1) <> (Sum 1)) <> (Sum 4) == (Sum 1) <> ((Sum 1) <> (Sum 4))
  3. ((Product 2) <> (Product 3)) <> (Product 2)
     == (Product 2) <> ((Product 3) <> (Product 2))
  4. (Product 3) <> (Product 4)
    == (Product 2) <> (Product 6)
    == (Product 12)
In example 1 we see lists "Form a monoid under concatenation"
In example 2 and 3 we see "Integers form a monoid under summation and multiplication"
Example 4 shows the commutitive property of Product, this is NOT a property of monoids, but a property of multipication.

  
identity: there is some argument that can be passed to the binary operation which always causes the operation to return the other argument. 

For the List instance of Monoid, the identity argument is [], an empty list
  [] <> [1,2] == [1,2] <> [] == [1,2]


Monoids are useful in parallel computation because intermediate results can be computed without affecting the final result.
eg. longComputation <> shortComputation1 <> shortComputation2
    == longComputation <> [shortComputation1, shortComputation2]
So the order these computations are completed in does not matter, the end result will be the same once they are all completed.

Appending values is intuitive for List, Sum, and Product, but for other types of values, appending is less about combining values and more about finding a summary value for the set. So think about appending not as concatenation, but as a way to condense any set of values to a summary value.

For the Bool type there are two monoid instances (similar to how both Sum and Product apply to integers)
Boolean Conjunction
  All True <> All True /= All True <> All False
Boolean Disjunction
  Any True <> Any True == Any True <> Any False /= Any False


For the Maybe type, monoid are more complicated. In the case where there are multiple Just values, we have to decide which Just value to return.
Similar to Bool (and Integer) there are two Monoid instances implemented for Maybe. (Well, of new types wrapping Maybe)

Returning the first or leftmost non-Nothing value
  First (Just 1) <> First (Just 2) == First {getFirst = Just 1}

Returning the last ot rightmost non-Nothing value
  Last (Just 1) <> Last (Just 2) == Last {getLast = Just 2}

In both instances, if there are no Just values, nothing is returned.


If the components of a type are monoids, the containing type can also be a monoid
instance (Monoid a, Monoid b) => Monoid (a, b)
For example
  (Sum 1 ,[1]) <> (Sum 2, [2]) == (Sum 3, [1,2])



S E M I G R O U P S

  a semigroup is similar to a monoid but it does not have the identity property. This means that the there is no "empty" semigroup.
For example, the NonEmpty type is a list that requires at least one element. Since the list can not be empty, the "mempty" function required by the monoid class can not be implemented for the NonEmpty type. 

