Monad Transformers
  a type that allows for the composition of Monads. Due to the fact that it is
  impossible to compose Monads generically, see the previous chapter for why this
  is the case, a new type is needed for each any Monad that needs to be composed.

MaybeT
  newtype MaybeT m a =
    MaybeT { runMaybeT :: m (Maybe a) }

  instance (Functor m) => Functor (MaybeT m) where
    fmap f (MaybeT ma) = MaybeT $ (fmap . fmap) f mMm

  instance (Applicative m) => Applicative (MaybeT m) where
    fmap (MaybeT fab) (MaybeT mma) = MaybeT $ (<*>) <$> fab <*> mma

notice how these instances are the same as the ones we wrote for the Compose type
in the last chapter. This is not a coincidence. The Compose type was essentially
the same as MaybeT, just more generic. The difference between Compose and MaybeT
(and all other Monad Transformers) is how the Monad instance is defined.

  instance (Monad m) => Monad (MaybeT m) where
    reutrn = pure
    (MaybeT mma) >>= f = MaybeT $ do
      ma <- mma
      case ma of 
        Just a ->
          runMaybeT $ f a
        Nothing ->
          return Nothing

When we tried to make a generic version of Monad for Compose, we failed because
there was no way to unwrap the values, so when `f` was applied, there was all
this extra structure wrapped around the value. But now, we know that one of the
Monads is a Maybe, so we can unwrap that layer using a case statement. This
allows us to apply the function passed to bind, and still return a value of the
correct type, since now we do not have to use two binds to reach the inner value.


Exercises: EitherT

  newtype EitherT e m a =
    EitherT { runEitherT :: m (Either e a) }

1. Functor instance
  instance Functor m => Functor (EitherT e m) where
    fmap f (EitherT me) = EitherT $ (fmap . fmap) f me

2. Applicative instance

  instance Applicative m => Applicative (EitherT e m) where
    pure a = EitherT . pure $ pure a
    (EitherT fab) <*> (EitherT mea) = EitherT $ (<*>) <$> fab <*> mea

The Functor and Applicative instances are identical to both Compose and MaybeT,
apart from the type constructors

3. Monad instance
  instance Monad m => Monad (EitherT e m) where
    return = pure
    (EitherT mea) >>= f = EitherT $
      mea >>= (\ea ->
        case ea of
          Left e ->
            return $ Left e
          Right a ->
            runEitherT $ f a
      )

  similar to the MaybeT instance we can unwrap the inner layer of structure with
  a case statement.

4. swapEither / swapEitherT
  swapEither :: Either e a -> Either a e
  swapEither eEA =
    case eEA of
      Left e ->
        Right e
      Right a ->
        Left a

  swapEitherT :: (Functor m) => EitherT e m a -> EitherT a m e
  swapEitherT (EitherT ema) = EitherT $ fmap swapEither ema

5. EitherT catamorphism
  eitherT :: Monad m
          => (a -> m c)
          -> (b -> m c)
          -> EitherT a m b
          -> m c
  eitherT amc bmc (EitherT me) =
    me >>= (\e ->
      case e of
        Left a ->
          amc a
        Right b ->
          bmc b
    )


ReaderT

  newtype ReaderT r m a =
    ReaderT { runReaderT :: r -> m a }

newtype ReaderT r m a =
  ReaderT { runReaderT :: r -> m a }

instance Functor m => Functor (ReaderT r m) where
  fmap f (ReaderT rma) = ReaderT $ (fmap . fmap) f rma

instance Applicative m => Applicative (ReaderT r m) where
  pure a = ReaderT . pure $ pure a
  (ReaderT rmab) <*> (ReaderT rma) = ReaderT $
    (<*>) <$> rmab <*> rma
 
instance Monad m => Monad (ReaderT r m) where
  return = pure
  (ReaderT rma) >>= f = ReaderT $
    (\r -> rma r >>= 
      (\a -> (runReaderT $ f a) r)
    )

even though you might think the Functor and Applicative instances would be
different for ReaderT than they have been for the other Monad Transformers,
they aren't. This is because `->` the function operator, has a valid Functor
and Applicative instance, so we can just reuse the same code we used before, but
with a different type constructor.


Exercises: StateT

  newtype StateT s m a =
    StateT { runStateT :: s -> m (a, s) }

1. Functor instance
  import Data.Bifunctor (first)
  instance (Functor m) => Functor (StateT s m) where
    fmap :: (a -> b)
         -> StateT s m a
         -> StateT s m b
    fmap f (StateT sma) = StateT $ (fmap . fmap . first) f sma

2. Applicative instance

  instance (Monad m) => Applicative (StateT s m) where
    pure :: a -> StateT s m a
    pure a = StateT $ (\s -> pure (a, s))

    (<*>) :: (StateT s m (a -> b))
          -> (StateT s m a)
          -> (StateT s m b)
    (StateT smab) <*> (StateT sma) = StateT $ 
      (\s ->
        (smab s) >>= 
          (\(ab, s') -> 
            (sma s') >>= 
              (\(a, s'') -> pure (ab a, s''))
          )
      )

it's important to note how `s` is used here. There are 3 different versions of
`s`, all representing the potentially changing state that is getting passed
through the functions. This is also why the type variable `m` is a Monad and 
not an Applicative, so the state can be updated after each function call.

3. Monad instance

  instance (Monad m) => Monad (StateT s m) where
    return :: a -> StateT s m a
    return = pure

    (>>=) :: StateT s m a
          -> (a -> StateT s m b)
          -> StateT s m b
    (StateT sma) >>= f = StateT $
      (\s ->
        (sma s) >>= (\(a, s') ->
          (runStateT $ f a) s'
        )
      )

  -- OR 

    (>>=) :: StateT s m a
          -> (a -> StateT s m b)
          -> StateT s m b
    (StateT sma) >>= f = StateT $ \s -> do
      (a, s') <- sma s
      (runStateT $ f a) s'

I wanted to show the implementation using both the `do` block and the explicitly
nested functions because it is easy to forget that one is just syntactic sugar
for the other. the `<-` operator is really just `>>=` but easier to read when
there are multiple binds to deal with.

Monad Transformers not to use
  - WriterT, memory inefficient, can be implemented as a variant of StateT
  - ListT, not very fast, there are better implementations, like `pipes` and 
    `conduit`

Exercise

preamble:
  embedded :: MaybeT (ExceptT String (ReaderT () IO)) Int
  embedded = return 1

  maybeUnwrap :: ExceptT String (ReaderT () IO) (Maybe Int)
  maybeUnwrap = runMaybeT embedded

  eitherUnwrap :: ReaderT () IO (Either String (Maybe Int))
  eitherUnwrap = runExceptT maybeUnwrap

  readerUnwrap :: () -> IO (Either String (Maybe Int))
  readerUnwrap = runReaderT eitherUnwrap

1.
  embedded' :: MaybeT (ExceptT String (ReaderT () IO)) Int
  embedded' = MaybeT . ExceptT . ReaderT $ const (pure $ Right (Just 1))


Lift

  Much like Applicative's `pure` and Monad's `return` Monad Transformers have
  `lift` as a way of embedding a value into the strucutre of a Monad
  Transformer. `lift` is defined in the MonadTrans instance of a given 
  Monad Transformer. 

    lift :: (Monad m, MonadTrans t)
         => m a
         -> t m a

  To see how it is similar to `pure` and `return` let's look
  at some implementations.

    instance MonadTrans IdentityT where
      lift ma = IdentityT ma

    instance MonadTrans MaybeT where
      lift ma = MaybeT $ liftM Just ma

  You may be confused by the use of `liftM`, what is that? 
    liftM :: Monad m => (a -> b) -> m a -> m b

  but wait, isn't that just `fmap`? And since all Monads are Applicatives, and all
  Applicative are Functors, what's the point of having `liftM` at all? Can't we
  just use `fmap` instead?
  The answer is, mathmatically yes, actually no. Since Monad does not require it's
  instances to be Funtors, they could theoretically not have `fmap` defined. So
  really, `liftM` is a design bug, and can be thought of as `fmap`.


Exercise lift types
break down the types for all the parts of `lift` for ReaderT

  lift :: (Monad m, MonadTrans t)
       => m a
       -> t m a

  instance MonadTrans (ReaderT r) where
    lift :: (Monad m) => m a -> (ReaderT r (ma))
    lift = ReaderT . const

  const :: a -> b -> a
  ReaderT . const :: ReaderT r a


Exercises: lift more

1. MonadTrans instance for EitherT

  instance MonadTrans (EitherT e) where
    lift = EitherT . fmap Right

2. MonadTrans instance for StateT

  instance MonadTrans (StateT s) where
    lift :: (Monad m) => m a -> StateT s m a
    lift ma = StateT $ \s -> fmap (flip (,) $ s) ma

  OR

  instance MonadTrans (StateT s) where
    lift :: (Monad m) => m a -> StateT s m a
    lift m = StateT $ \s -> do
      a <- m 
      return (a, s)


MonadIO
  while `lift` works one layer at a time, applying structure for each layer of
  the Monad Transformer stack, `liftIO`, defined in the MonadIO type class, lifts
  over all the structure in the Monad Tranformer stack.

  class (Monad m) => MonadIO m where
    liftIO :: IO a -> m a

  IdentityT MonadIO instance
    instance (MonadIO m) => MonadIO (IdentityT m) where
      liftIO = IdentityT . liftIO

  EitherT MonadIO instance
    instance (MonadIO m) => MonadIO (EitherT e m) where
      liftIO = lift . liftIO

  so what I don't understand is how we can use `lift` as part of the definition
  of `liftIO`. MonadTrans is not defined as a prerequisite for MonadIO, so how
  do we know it is defined? And how do we know it is defined correctly? It seems
  like the class definition SHOULD BE
    class (MonadTrans m) => MonadIO m where
      liftIO :: IO a -> m 
  But its not. There is just a Monad constraint on `m`
    
Exercises: Some instances
1. MaybeT
  instance (MonadIO m) => MonadIO (MaybeT m) where
    liftIO :: IO a -> MaybeT m a
    liftIO = lift . liftIO

2. ReaderT
  instance (MonadIO m) => MonadIO (ReaderT r m) where
    liftIO :: IO a -> ReaderT r m a
    liftIO = lift . liftIO

3. StateT
  instance (MonadIO m) => MonadIO (StateT s m) where
    liftIO :: IO a -> StateT s m a
    liftIO = lift . liftIO

soooo, the instances are all the same. so what does that mean? There is clearly
something recursive happening with `liftIO` calling itself. Of course, it's not
really calling itself, it's calling the implementation of `liftIO` for another
type. I think this is why `liftIO` only has to ever be called once. Since we
use types to recursively construct the required structure around the value. So
the recurive `liftIO` builds the lower level structure, and then `lift` (which
remember is basically `pure`/`return` but for MonadTransformers) adds the
additional structure required by the current instance.


Hypothetical Exercise:

Are `ReaderT r Maybe` and `MaybeT (Reader r)` the same?

tl;dr -
  I think so. Creating and modifying them are very similar. And when you
  actually write out their types, they are basically the same

let's look at the set up
  maybeTReader :: a -> MaybeT (Reader String) a
  maybeTReader a = MaybeT $ return (Just a)

  readerTMaybe :: a -> ReaderT String Maybe a
  readerTMaybe a = ReaderT $ return (Just a)

this doesn't really tell us much. So let's look at some functions that check
if the inner value is 1, and if it is, make that value True, otherwise False

  isOne :: MaybeT (Reader String) Int -> MaybeT (Reader String) Bool
  isOne = fmap (==1)
   
  isOne' :: ReaderT String Maybe Int -> ReaderT String Maybe Bool
  isOne' = fmap (==1)

so far so good, the implementation is exactly the same. The underlying code may
not be, but the result is equal.

now let's get that value so we can print it out

  getVal :: MaybeT (Reader String) Bool -> Maybe Bool
  getVal (MaybeT rma) = runReader rma ""

  getVal' :: ReaderT String Maybe Bool -> Maybe Bool
  getVal' (ReaderT rma) = rma ""

these are not quite the same, as they have to deal with different structures, but
are still not very different.

  main :: IO ()
  main = do
    putStrLn . show . getVal . isOne $ maybeTReader 1
    putStrLn . show . getVal . isOne $ maybeTReader 0

    putStrLn . show . getVal' . isOne' $ readerTMaybe 1
    putStrLn . show . getVal' . isOne' $ readerTMaybe 0

these two types function the same under these circumstances, so that gives some
evidence that they are equivalent.

Let's look at how the types compare when we write them out

  newtype ReaderT r m a = ReaderT { runReader :: (\r -> m a) }
  newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a)

  ReaderT r Maybe a = ReaderT { runReader :: (\r -> Maybe a) }
  MaybeT (Reader r) a = MaybeT { runMaybeT :: (\r -> Maybe a)}
  -- not real type signatures, but definitely demonstrate my point

Now, this is more convincing that these types are equivalent. We can see that
for both we have some Monad Transformer wrapping a function that takes one 
argument and returns a Maybe. Given that, I would say these are equivalent.


Chapter Exercises:

Write the code

  newtype ReaderT r m a =
    ReaderT { runReaderT :: r -> m a }

  type Reader r a = ReaderT r Identity a

  newtype StateT s m a =
    StateT { runStateT :: s -> m (a, s) }

1. Reader that increments
  rDec :: Num a => Reader a a
  rDec = ReaderT $ (\r -> Identity $ r + 1)

2. Reader that increments (point free)
  rDec :: Num a => Reader a a
  rDec = ReaderT $ Identity . ((+) (-1))

3. Reader that shows
  rShow :: Show a => ReaderT a Identity String
  rShow = ReaderT $ (\r -> Identity $ show r)

4. Reader that shows (point free)
  rShow :: Show a => ReaderT a Identity String
  rShow = ReaderT $ Identity . show

5. prints and increments
  rPrintAndInc :: (Num a, Show a) => ReaderT a IO a
  rPrintAndInc = ReaderT $ \r -> do
    putStrLn $ "Hi: " <> show r
    return (r + 1)

6. prints input, returns stringify input and incremented state

  sPrintIncAccum :: (Num a, Show a) => StateT a IO String
  sPrintIncAccum = StateT $ \s -> do
    putStrLn $ "Hi: " <> show s
    return (show s, s + 1)

Fix the code
  see code in haskell-projects/tests/MonadTransformers/FixTheCode.hs

Hit Counter
  see code in haskell-projects/tests/hitCounter/src/Main.hs

Morra
  see code in haskell-projects/tests/Morra/src/Main.hs
