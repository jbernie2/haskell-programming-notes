Monoid of Functions
  instance Monoid b => Monoid (a -> b)
  mappend f g = (\a -> (f a) <> (g a))

  given two functions (f and g) of type `a -> b`
  `f <> g` is a function of type `a -> b`
  it takes a single `a` applies it to both functions and then combines the result
  monoidally.


Using Applicative to write Utility functions

  import Control.Applicative (liftA2)

  (<||>) :: (a -> Bool)
         -> (a -> Bool)
         -> a
         -> Bool
  (<||>) = liftA2 (||)

  this operator allows for the disjunction of functions, like
  f = (\x -> x == 42)
  g = (\x -> x == 9001)

  (f <||> g) 0    == False
  (f <||> g) 42   == True
  (f <||> g) 9001 == True


  the type of `liftA2` is 
  (liftA2) :: Applicative f => (a -> b -> c) -> f a -> f b -> f c

  the type of `||` is
  (||) :: Bool -> Bool -> Bool

  `f` and `g` both have the signature
  Num a => a -> Bool

  and it is important to remember that (->) implements the type class Applicative
  when applied to one argument
  so there is a valid Applicative instance for `(->) a`
 
  so `liftA2 (||)`
  has type 
  Applicative f => f Bool -> f Bool -> f Bool

  and `f` in this case is `Num a => (->) a`
  so filling in the types (letting `f` be `(->) a` ) gets

  Num a => ((->) a Bool) -> ((->) a Bool) -> ((->) a Bool)
  or
  Num a => (a -> Bool) -> (a -> Bool) -> (a -> Bool)

  so then when we apply `f` and `g` to `liftA2 (||)` we get the signature
  Num a => a -> Bool

  which allows us to pass a single `Num a` and then that `a` is passed to both
  `f` and `g` and then the boolean disjunction is returned.

  (f <||> g) 0    == False
  (f <||> g) 42   == True
  (f <||> g) 9001 == True

url-shortener
  project can be found in haskell-projects/url-shortener
