Foldable
  A type class that describes how to produce a summary value for a given type.
  This type class is usually applied to data structures
  Foldable is a way of generalizing a catamorphism

  All types that implement foldable are higher kinded types of kind (* -> *)
  Eg. [String] or Tree Int

  class Foldable (t :: * -> *) where
    fold :: Monoid m => t m -> m
    foldMap :: Monoid m => (a -> m) -> t a -> m

fold
  `fold` combines the elements of the structure using the Monoid
  defined for that type.
  eg `fold ["a", "b", "c"] == "abc"`

foldMap
  `foldMap` take a function as its first argument. But, unlike `foldr` this
  this function doees not return a summary value, it returns a Monoid which will
  then be combined to produce the summary value

  eg. `foldMap Sum [1..5] == Sum {getSum = 15}`
    `Sum` is a data constructor, but as a function, it produces a `Sum` which has
    a monoid instance defined for it.

  A function that is not a data constructor can also be applied via foldMap. 
  However, that function must still produce a Monoid
  eg.
    foldMap (*5) (Sum <$> [1,2,3])
    == foldMap (*5) [Sum 1, Sum 2, Sum 3]
    == fold [Sum 5, Sum 10, Sum 15]
    == Sum { getSum = 30 }


Identity instance of Foldable
  instance Foldable Identity where
    foldr f z (Identity x) = f x z

    foldl f z (Identity x) = f z x

    foldMap f (Identity x) = f x

  Since `Identity` only holds one value there really isn't anything to "summarize"
  so this just function application.


Maybe (Optional) instance of Foldable

  data Optional a = Yep a | Nada 
  instance Foldable Optional where
    foldr _ z Nada = z
    foldl f z (Yep x) = f x z

    foldl _ z Nada = z
    foldl f z (Yep x) = f z x

    foldMap _ Nada = mempty
    foldMap f (Yep a) f a

  because `Maybe` or `Optional` does not guarantee that it will contain a value 
  (Nothing, Nada), `foldMap` must be able to produce a default value in that case.

  looking at the signature of `foldMap`
    foldMap :: Monoid m => (a -> m) -> t a -> m

  We see that the summary value returned (`m`) is a Monoid.
  A property of Monoids is that they implement an `mempty` value, or an Identity
  so in the case where the arguments do not provide a value to return, `foldMap`
  returns an empty value.

  This also means that type of the `Maybe` must be specified

  `foldMap (+1) Nothing` will result in an error
  `foldMap (+1) Nothing :: Sum Int` will not, because we are specifying the type of
  that should be returned from the function is `Sum Int`


toList - returns elements of a structure from left to right
  toList :: t a -> [a]

  toList (1,2) == [2] 
  similar to `fmap`, `toList` works on types of kind `(* -> *)`, so for type
  `(,) a b`, `(,) a` is the structure, so `[b]` is the type that gets returned.


null - test whether the structure is empty
  null :: t a -> Bool

  `null` returns `True` for error values like `Left` and `Nothing`
  eg.
    null Nothing == True

  However, `null` returns `False` if a structure contains error values
  eg.
    null [Nothing, Nothing] == False

  `null` is checking for "emptiness" so while for `Maybe`, `Nothing` is considered
  empty, for list, the list not being equal to `[]` would constitute a non-null
  list. Just like how a list of empty lists is not empty
  null [[]] == False


length - returns the size/length of a finite structure as an `Int`

  What's weird is that
    fmap length Just ['a','b','c'] == 1
    fmap length $ Just ['a','b','c'] == Just 3

  so let's break down the function signatures
    fmap :: Functor f => (a -> b) -> f a -> f b
    length :: Foldable t => t a -> Int
    Just :: a -> Maybe a

  and the applied signatures
    fmap length :: (Functor f, Foldable t) => f (t a) -> f Int

    fmap length Just :: a -> Int 

    ?????? where did the `f` go in the return value??
    I think `(->) a` is the `f` and `fmap length Just` is a fully applied function,
    the return value of which, is another function.
                      
  filling in the type variables
                        length              Just              function returned
    fmap length Just :: (Maybe a -> Int) -> (a -> Maybe a) -> (a -> Int)
    fmap             :: (      a -> b  ) -> (f     a     ) -> (f     b )

    `a` is `Maybe a`
    `b` is `Int`
    `f` is `(->) a`

    again, a function that only requires one additional argument has the
    kind (* -> *) and is a valid functor.

  but then why is
    fmap length Just ['a','b','c'] == 1
  well, the length of `Just` anything is `1` so no matter what argument is passed
  the result will be `1`, even `undefined` works
    fmap length Just undefined == 1

  as for
    fmap length $ Just ['a','b','c'] == Just 3
  let's look at the signatures
    fmap length :: (Functor f, Foldable t) => f (t a) -> f Int

  and `Just ['a','b','c']` is an `f (t a)` so we would expect to get back an `f Int`
  which in this case is `Just 3`
  

elem - checks if an element is a member of a structure.

  elem :: Eq a => t a -> Bool

  `elem` returns false for "structural values"
  elem 3 (Left 3) == False
  elem 3 (Right 3) == True

  because for `Either`, the `Left` value is part of the structure of the type.
  Once again, this similar to how `fmap` works for `Either`

maximum - largest element in a structure
  maximum :: Ord a => t a -> a

minimum - smallest element in a structure
  minimum :: Ord a => t a -> a

sum :: (Foldable t, Num a) => t a -> a
product :: (Foldable t, Num a) => t a -> a
  There's no trickery with these. These functions only apply to nums


Exercises
Implemet thee functions in terms of foldMap or foldr

1. sum :: (Foldable t, Num a) => t a -> a
  sum' :: (Foldable t, Num a) => t a -> a
  sum' t = getSum $ foldMap Sum t

2. product :: (Foldable t, Num a) => t a -> a
  product' :: (Foldable t, Num a) => t a -> a
  product' t = getProduct $ foldMap Product t

3. elem :: (Foldable t, Eq a) => a -> t a -> Bool 
  elem' :: (Foldable t, Eq a) => a -> t a -> Bool
  elem' x xs = getAny $ foldMap (Any . ((==) x)) xs

4. minimum :: (Foldable t, Ord a) -> t a -> Maybe a
  minimum' :: (Foldable t, Ord a) => t a -> Maybe a
  minimum' xs =
    foldr 
      (\x mAcc -> 
        case mAcc of
          Just acc -> Just $ min x acc 
          Nothing -> Just $ x
      )
      Nothing
      xs

5. maximum :: (Foldable t, Ord a) -> t a -> Maybe a
  maximum' :: (Foldable t, Ord a) => t a -> Maybe a
  maximum' xs =
    foldr 
      (\x mAcc -> 
        case mAcc of
          Just acc -> Just $ max x acc 
          Nothing -> Just $ x
      )
      Nothing
      xs

6. null :: (Foldable t) => t a -> Bool
  null' :: (Foldable t) => t a -> Bool
  null' t = length' t == 0

7. length :: (Foldable t) => t a -> Int
  length' :: (Foldable t) => t a -> Int
  length' t = foldr (\_ acc -> acc + 1) 0 t

8. toList :: (Foldable t) => t a -> [a]
  toList' :: (Foldable t) => t a -> [a]
  toList' t = foldr (\x l -> x : l) [] t

9. fold :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
  fold' :: (Foldable t, Monoid m) => t m -> m
  fold' t = foldMap id t

10. foldMap :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
  foldMap' :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
  foldMap' f t = foldr (\x acc -> f x <> acc) mempty t 


Chapter Exercises
write Foldable instances for the following datatypes:

1.
data Constant a b = Constant b
instance Foldable (Constant a) where
  foldMap f (Constant b) = f b

2.
data Two a b = Two a b
instance Foldable (Two a) where
  foldMap f (Two _ b) = f b

3.
data Three a b c = Three a b c
instance Functor (Three a b) where
  fmap f (Three a b c) = Three a b (f c)

4.
data Three' a b = Three' a b b
instance Foldable (Three' a) where
  foldMap f (Three' _ b b') = f b <> f b'

5.
data Four' a b = Four' a b b b deriving (Eq, Show)
instance Foldable (Four' a) where
  foldMap f (Four' _ b b' b'') = f b <> f b' <> f b''

6.
Write a filter function for Foldable types using the foldMap function

filterF
  :: ( Applicative f
     , Foldable t
     , Monoid (f a))
  => (a -> Bool)
  -> t a
  -> f a
filterF fn t = foldMap (\x -> if fn x then pure x else mempty) t

what's really interesting here is that the Monoid `f a` and the Applicative `f` of
the return value is not specified by the arguments (Notice how there is no `f` in 
the args, only in the return value). Which means that the return type has to be 
inferred from usage

Which means all of the following return `True`
  filterF ((<) 2) [1,2,3,4] == [3,4]
  filterF ((<) 2) [1,2,3,4] == (First (Just 3))
  filterF ((<) 2) [1,2,3,4] == (Last (Just 4))
Based on what is on the right of the `==` the functions behavior changes.
`[]` `First` and `Last` are all Monoids, and therefore control how `filterF`
summarizes the result of the computation.

However
  filterF ((<) 2) [1,2,3,4]
is not valid because there is no way to infer what kind of Applicative should be
returned, and no way to determine how to create a summary value (Monoid). This
function can only be called in a context where the type of the Monoid/Applicative
can be inferred
  
